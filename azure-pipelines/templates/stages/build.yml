parameters:
  - name: config
    type: string
    default: debug
  - name: projects
    type: object

stages:
  - stage: Build
    jobs:
      - job: Build
        strategy:
          matrix:
            win-x64:
              vmImage: windows-latest
              target: win-x64
              scriptFolder: 'windows'

            win-x86:
              vmImage: windows-latest
              target: win-x86
              scriptFolder: 'windows'

            linux-x64:
              vmImage: ubuntu-latest
              target: linux-x64
              scriptFolder: 'linux'

            linux-arm:
              vmImage: ubuntu-latest
              target: linux-arm
              scriptFolder: 'linux'

            linux-arm64:
              vmImage: ubuntu-latest
              target: linux-arm64
              scriptFolder: 'linux'

            osx-x64:
              vmImage: macos-latest
              target: osx-x64
              scriptFolder: 'macos'

            osx-arm64:
              vmImage: macos-latest
              target: osx-arm64
              scriptFolder: 'macos'

        pool:
          vmImage: $(vmImage)

        steps:
          - template: ../restore.yml

          - ${{ each project in parameters.projects }}:
              - pwsh: |
                  mv ./Directory.build.props ./Directory.Build.props
                  dotnet publish ./src/${{ project }}/${{ project }}.csproj -c ${{ parameters.config }} -o $(Build.ArtifactStagingDirectory)/drop-$(target) -r $(target) -f net8.0 --self-contained true -p:DebugType=None -p:DebugSymbols=false -p:GenerateRuntimeConfigurationFiles=false -p:PublishSingleFile=true
                displayName: "[${{ project }}] Publish"

          - task: codesigning@2
            displayName: 'Code Signing'
            inputs:
              secureFileId: 'codesigning.pfx'
              signCertPassword: '$(Code_Signing_Password)'
              filePaths: |
                $(Build.ArtifactStagingDirectory)/**/*fiskaltrust*
                ./src/**/*fiskaltrust*.exe
                ./src/**/*fiskaltrust*.dll
                ./src/**/fiskaltrust.Launcher.dll
                ./src/**/fiskaltrust.Launcher.exe
                ./src/**/fiskaltrust.LauncherUpdater.exe

          - publish: $(Build.ArtifactStagingDirectory)/drop-$(target)
            artifact: drop-$(target)

          - pwsh: |
              New-Item -ItemType Directory -Path $(Build.ArtifactStagingDirectory)/raw-$(target)/
              New-Item -ItemType Directory -Path $(Build.ArtifactStagingDirectory)/package-$(target)/
              New-Item -ItemType Directory -Path $(Build.ArtifactStagingDirectory)/scripts-$(target)/
            displayName: Create Directories

          - ${{ each project in parameters.projects }}:
            - pwsh: |
                Move-Item -Path $(Build.ArtifactStagingDirectory)/drop-$(target)/${{ project }}* -Destination $(Build.ArtifactStagingDirectory)/raw-$(target)/
              displayName: "[${{ project }}] Copy executables"

          - pwsh: |
              $version = (Select-Xml -Path ./Directory.Build.props -XPath 'Project/PropertyGroup/Version').Node.InnerText

              if("$(vmImage)" -eq "windows-latest") {
                Compress-Archive -Path $(Build.ArtifactStagingDirectory)/raw-$(target)/* -DestinationPath $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip
              } else {
                bash -c "cd $(Build.ArtifactStagingDirectory)/raw-$(target)/`nzip -r $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip ./"
              }

              $hash = Get-FileHash $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip -Algorithm SHA256
              $hashbytes = $hash.Hash -split '([A-F0-9]{2})' | foreach-object { if ($_) {[System.Convert]::ToByte($_,16)}}
              $hashstring = [System.Convert]::ToBase64String($hashbytes)
              $hashstring | Set-Content $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip.hash
            displayName: Package executables

          - pwsh: |
              Copy-Item -Path ./README.md -Destination $(Build.ArtifactStagingDirectory)/scripts-$(target)/README.md
            displayName: "Copy README.md to scripts artifacts"

          - pwsh: |
              $readmeContent = Get-Content $(Build.ArtifactStagingDirectory)/scripts-$(target)/README.md -Raw
              $updatedContent = $readmeContent -replace '(?s)<!-- BEGIN (CONTRIBUTING|LICENSE) -->.*?<!-- END (CONTRIBUTING|LICENSE) -->\s*', ''
              $updatedContent | Set-Content $(Build.ArtifactStagingDirectory)/scripts-$(target)/README.md
            displayName: "Update README.md"

          - pwsh: |
              $version = (Select-Xml -Path ./Directory.Build.props -XPath 'Project/PropertyGroup/Version').Node.InnerText
              $scriptTargetPath = "$(Build.ArtifactStagingDirectory)/scripts-$(target)/fiskaltrust.Launcher.Scripts-$version.zip"
              Copy-Item -Path ./scripts/$(scriptFolder)/* -Destination $(Build.ArtifactStagingDirectory)/scripts-$(target)

              if("$(vmImage)" -eq "windows-latest") {
                Compress-Archive -Path $(Build.ArtifactStagingDirectory)/scripts-$(target)/* -DestinationPath $scriptTargetPath
              } else {
                bash -c "chmod +x $(Build.ArtifactStagingDirectory)/scripts-$(target)/*"
                bash -c "cd $(Build.ArtifactStagingDirectory)/scripts-$(target) && zip -r $scriptTargetPath ./"
              }
            displayName: "Package scripts with README.md"

          - pwsh: |
              Get-ChildItem -Path $(Build.ArtifactStagingDirectory)/scripts-$(target)/* -Exclude *.zip | Remove-Item
            displayName: "Clean up scripts directory"

          - publish: $(Build.ArtifactStagingDirectory)/package-$(target)
            artifact: package-$(target)

          - publish: $(Build.ArtifactStagingDirectory)/scripts-$(target)
            artifact: scripts-$(target)