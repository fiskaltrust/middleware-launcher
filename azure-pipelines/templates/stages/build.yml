parameters:
  - name: config
    type: string
    default: debug
  - name: projects
    type: object

stages:
  - stage: Build
    jobs:
      - job: Build
        strategy:
          matrix:
            win-x64:
              vmImage: windows-latest
              target: win-x64
              scriptFolder: 'windows'
            win-x86:
              vmImage: windows-latest
              target: win-x86
              scriptFolder: 'windows'
            linux-x64:
              vmImage: ubuntu-latest
              target: linux-x64
              scriptFolder: 'linux'
            linux-arm:
              vmImage: ubuntu-latest
              target: linux-arm
              scriptFolder: 'linux'
            linux-arm64:
              vmImage: ubuntu-latest
              target: linux-arm64
              scriptFolder: 'linux'
            osx-x64:
              vmImage: macos-11
              target: osx-x64
              scriptFolder: 'osx'
        pool:
          vmImage: $(vmImage)
        steps:
          - template: ../restore.yml
          - ${{ each project in parameters.projects }}:
              - pwsh: |
                  mv ./Directory.build.props ./Directory.Build.props
                  dotnet publish ./src/${{ project }}/${{ project }}.csproj -c ${{ parameters.config }} -o $(Build.ArtifactStagingDirectory)/drop-$(target) -r $(target) -f net6.0 --self-contained true /p:EnableCompressionInSingleFile=true /p:DebugType=None /p:DebugSymbols=false /p:GenerateRuntimeConfigurationFiles=false /p:PublishSingleFile=true /p:PublishReadyToRun=true
                displayName: "Publish ${{ project }}"
          - task: codesigning@2
            displayName: 'Code Signing'
            inputs:
              secureFileId: 'codesigning.pfx'
              signCertPassword: '$(Code_Signing_Password)'
              filePaths: |
                $(Build.ArtifactStagingDirectory)/**/*fiskaltrust*
                ./src/**/*fiskaltrust*.exe
                ./src/**/*fiskaltrust*.dll
                ./src/**/fiskaltrust.Launcher.dll
                ./src/**/fiskaltrust.Launcher
                ./src/**/fiskaltrust.Launcher.exe
                ./src/**/fiskaltrust.LauncherUpdater
                ./src/**/fiskaltrust.LauncherUpdater.exe
                ./scripts/**/*.cmd
                ./scripts/**/*.sh
          - publish: $(Build.ArtifactStagingDirectory)/drop-$(target)
            artifact: drop-$(target)
          - ${{ each project in parameters.projects }}:
              - pwsh: |
                  $version = (Select-Xml -Path ./Directory.Build.props -XPath 'Project/PropertyGroup/Version').Node.InnerText
                  $packagePath = "$(Build.ArtifactStagingDirectory)/package-$(target)"
                  $rawPath = "$(Build.ArtifactStagingDirectory)/raw-$(target)"
                  $zipPath = "$packagePath/fiskaltrust.Launcher-$version.zip"
                  $tarGzPath = "$packagePath/fiskaltrust.Launcher-$version.tar.gz"
                  
                  New-Item -ItemType Directory -Path $rawPath, $packagePath -Force
                  Move-Item -Path $(Build.ArtifactStagingDirectory)/drop-$(target)/${{ project }}* -Destination $rawPath/

                  $env:SCRIPT_FOLDER = "$(scriptFolder)"

                  $scriptFolderForPlatform = if ("$(target)" -match "osx-x64") { "linux" } else { $env:SCRIPT_FOLDER }
                  $scriptFolderPath = "./scripts/$scriptFolderForPlatform"
                  Copy-Item -Path "$scriptFolderPath/*" -Destination $rawPath/                  
                  
                  if ("$(vmImage)" -eq "windows-latest") {
                      Compress-Archive -Path $rawPath/* -DestinationPath $zipPath -Force
                      $fileToHash = $zipPath
                  } else {
                      tar -czf $tarGzPath -C $rawPath .
                      $fileToHash = $tarGzPath
                  }
                  
                  if (Test-Path $fileToHash) {
                      if ((Get-Item $fileToHash).Length -gt 0) {
                          $hashString = if ("$(vmImage)" -eq "windows-latest") {
                              (Get-FileHash $fileToHash -Algorithm SHA256).Hash
                          } else {
                              $hashCommand = if ("$(vmImage)" -match "macos-") { "shasum -a 256" } else { "sha256sum" }
                              (bash -c "$hashCommand $fileToHash").Split(' ')[0]
                          }

                          if (![string]::IsNullOrWhiteSpace($hashString)) {
                              $hashbytes = $hashString -split '([A-F0-9]{2})' | Where-Object { $_ } | ForEach-Object { [System.Convert]::ToByte($_, 16) }
                              $hashbase64 = [System.Convert]::ToBase64String($hashbytes)
                              $hashFilePath = "$packagePath/fiskaltrust.Launcher-$version.$(if ("$(vmImage)" -eq "windows-latest") { "zip" } else { "tar.gz" }).hash"
                              Set-Content -Path $hashFilePath -Value $hashbase64
                          } else {
                              Write-Error "Failed to compute hash."
                          }
                      } else {
                          Write-Error "File to hash is empty."
                      }
                  } else {
                      Write-Error "File to hash does not exist."
                  }
                displayName: "Package ${{ project }}"
          - publish: $(Build.ArtifactStagingDirectory)/package-$(target)
            artifact: package-$(target)