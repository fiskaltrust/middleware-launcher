parameters:
  - name: config
    type: string
    default: debug
  - name: projects
    type: object

stages:
  - stage: Build
    jobs:
      - job: Build
        strategy:
          matrix:
            win-x64:
              vmImage: windows-latest
              target: win-x64
              scriptFolder: 'windows'
            win-x86:
              vmImage: windows-latest
              target: win-x86
              scriptFolder: 'windows'
            linux-x64:
              vmImage: ubuntu-latest
              target: linux-x64
              scriptFolder: 'linux'
            linux-arm:
              vmImage: ubuntu-latest
              target: linux-arm
              scriptFolder: 'linux'
            linux-arm64:
              vmImage: ubuntu-latest
              target: linux-arm64
              scriptFolder: 'linux'
            osx-x64:
              vmImage: macos-11
              target: osx-x64
              scriptFolder: 'osx'
        pool:
          vmImage: $(vmImage)
        steps:
          - template: ../restore.yml
          - ${{ each project in parameters.projects }}:
              - pwsh: |
                  mv ./Directory.build.props ./Directory.Build.props
                  dotnet publish ./src/${{ project }}/${{ project }}.csproj -c ${{ parameters.config }} -o $(Build.ArtifactStagingDirectory)/drop-$(target) -r $(target) -f net6.0 --self-contained true /p:EnableCompressionInSingleFile=true /p:DebugType=None /p:DebugSymbols=false /p:GenerateRuntimeConfigurationFiles=false -p:PublishSingleFile=true -p:PublishReadyToRun=true
                displayName: "Publish ${{ project }}"
          - task: codesigning@2
            displayName: 'Code Signing'
            inputs:
              secureFileId: 'codesigning.pfx'
              signCertPassword: '$(Code_Signing_Password)'
              filePaths: |
                $(Build.ArtifactStagingDirectory)/**/*fiskaltrust*
                ./src/**/*fiskaltrust*.exe
                ./src/**/*fiskaltrust*.dll
                ./src/**/fiskaltrust.Launcher.dll
                ./src/**/fiskaltrust.Launcher
                ./src/**/fiskaltrust.Launcher.exe
                ./src/**/fiskaltrust.LauncherUpdater
                ./src/**/fiskaltrust.LauncherUpdater.exe
          - publish: $(Build.ArtifactStagingDirectory)/drop-$(target)
            artifact: drop-$(target)
          - ${{ each project in parameters.projects }}:
              - pwsh: |
                  # Create directories for raw and packaged artifacts
                  New-Item -ItemType Directory -Path $(Build.ArtifactStagingDirectory)/raw-$(target)/ -Force
                  New-Item -ItemType Directory -Path $(Build.ArtifactStagingDirectory)/package-$(target)/ -Force
                  # Move published files to the raw directory
                  Move-Item -Path $(Build.ArtifactStagingDirectory)/drop-$(target)/${{ project }}* -Destination $(Build.ArtifactStagingDirectory)/raw-$(target)/
                  # Extract the version number from the Directory.Build.props file
                  $version = (Select-Xml -Path ./Directory.Build.props -XPath 'Project/PropertyGroup/Version').Node.InnerText
                  # Path variables for zip and tar.gz files
                  $zipPath = "$(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip"
                  $tarGzPath = "$(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.tar.gz"
                  # Check if the image is Windows to use zip, otherwise use tar.gz
                  if ("$(vmImage)" -eq "windows-latest") {
                      Compress-Archive -Path $(Build.ArtifactStagingDirectory)/raw-$(target)/* -DestinationPath $zipPath -Force
                  } else {
                      tar -czf $tarGzPath -C $(Build.ArtifactStagingDirectory)/raw-$(target) .
                  }
                  # Check if the file to hash exists and is not empty
                  $fileToHash = if ("$(vmImage)" -eq "windows-latest") { $zipPath } else { $tarGzPath }
                  if (Test-Path $fileToHash) {
                      if ((Get-Item $fileToHash).Length -gt 0) {
                          Write-Host "File to hash: $fileToHash"
                          # Compute the file hash
                          if ("$(vmImage)" -eq "windows-latest") {
                              $hashResult = Get-FileHash $zipPath -Algorithm SHA256
                              $hashString = $hashResult.Hash
                          } else {
                              # Use shasum for macOS and sha256sum for Linux
                              $hashCommand = if ("$(vmImage)" -match "macos-") { "shasum -a 256" } else { "sha256sum" }
                              # Run hash command and capture the output
                              $hashResult = bash -c "$hashCommand $tarGzPath"
                              # Split the output to get just the hash value
                              $hashString = $hashResult.Split(' ')[0]
                          }
                          # Check if the hash string is not null or empty
                          if (![string]::IsNullOrWhiteSpace($hashString)) {
                              Write-Host "Hash result: $hashString"
                              # Convert the hash string into a byte array
                              $hashbytes = $hashString -split '([A-F0-9]{2})' | Where-Object { $_ } | ForEach-Object { [System.Convert]::ToByte($_, 16) }
                              # Ensure the byte array is not null or empty
                              if ($hashbytes) {
                                  $hashstring = [System.Convert]::ToBase64String($hashbytes)
                                  # Write the hash value to a file
                                  $hashFilePath = if ("$(vmImage)" -eq "windows-latest") { 
                                      "$(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip.hash"
                                  } else { 
                                      "$(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.tar.gz.hash"
                                  }
                                  Set-Content -Path $hashFilePath -Value $hashstring
                                  Write-Host "Hash base64 string: $hashstring"
                              } else {
                                  Write-Error "Hash bytes array is null or empty."
                              }
                          } else {
                              Write-Error "Failed to compute hash."
                          }
                      } else {
                          Write-Error "File to hash is empty."
                      }
                  } else {
                      Write-Error "File to hash does not exist."
                  }
                displayName: "Package ${{ project }}"
          - publish: $(Build.ArtifactStagingDirectory)/package-$(target)
            artifact: package-$(target)
      - job: PublishScripts
        dependsOn: Build
        condition: succeeded()
        strategy:
          matrix:
            linux:
              vmImage: ubuntu-latest
              scriptFolder: linux
            windows:
              vmImage: windows-latest
              scriptFolder: windows
        pool:
          vmImage: $(vmImage)
        steps:
          - checkout: self
          - ${{ if eq(variables['Agent.OS'], 'Windows_NT') }}:
              - pwsh: |
                  $version = (Select-Xml -Path "./Directory.Build.props" -XPath "//Project/PropertyGroup/Version").Node.InnerText
                  $scriptFolder = "$(scriptFolder)"
                  New-Item -ItemType Directory -Path "$(Build.ArtifactStagingDirectory)/scripts-$scriptFolder" -Force
                  Copy-Item -Path "./scripts/$scriptFolder/*" -Destination "$(Build.ArtifactStagingDirectory)/scripts-$scriptFolder/"
                displayName: 'Prepare Script Artifacts (Windows)'
          - ${{ if ne(variables['Agent.OS'], 'Windows_NT') }}:
              - bash: |
                  version=$(xmllint --xpath 'string(//Project/PropertyGroup/Version)' ./Directory.Build.props)
                  scriptFolder=$(scriptFolder)
                  mkdir -p "$(Build.ArtifactStagingDirectory)/scripts-$scriptFolder"
                  cp -R "./scripts/$scriptFolder/." "$(Build.ArtifactStagingDirectory)/scripts-$scriptFolder/"
                displayName: 'Prepare Script Artifacts (Linux)'
    
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/scripts-$(scriptFolder)"
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: "$(Build.ArtifactStagingDirectory)/scripts-$(scriptFolder)-$version.zip"
              replaceExistingArchive: true
            displayName: 'Archive Scripts'
    
          - publish: "$(Build.ArtifactStagingDirectory)/scripts-$(scriptFolder)-$version.zip"
            artifact: scripts-$(scriptFolder)
            displayName: 'Publish Scripts'