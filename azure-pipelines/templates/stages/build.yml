parameters:
- name: config
  type: string
  default: debug
- name: projects
  type: object

stages:
- stage: Build

  jobs:
  - job: Build

    strategy:
      matrix:
        win-x64:
          vmImage: windows-latest
          target: win-x64

        win-x86:
          vmImage: windows-latest
          target: win-x86

        linux-x64:
          vmImage: ubuntu-latest
          target: linux-x64

        osx-x64:
          vmImage: macos-latest
          target: osx-x64

    pool:
      vmImage: $(vmImage)

    steps:
    - template: ../restore.yml

    - ${{ each project in parameters.projects }}:
      - pwsh: |
          mv ./Directory.build.props ./Directory.Build.props
          dotnet publish ./src/${{ project }}/${{ project }}.csproj -c ${{ parameters.config }} -o $(Build.ArtifactStagingDirectory)/drop-$(target) -r $(target) -f net6.0 --self-contained true /p:EnableCompressionInSingleFile=true /p:DebugType=None /p:DebugSymbols=false /p:GenerateRuntimeConfigurationFiles=false
        displayName: Publish

    - publish: $(Build.ArtifactStagingDirectory)/drop-$(target)
      artifact: drop-$(target)

    - pwsh: |
        New-Item -ItemType Directory -Path $(Build.ArtifactStagingDirectory)/raw-$(target)/
        New-Item -ItemType Directory -Path $(Build.ArtifactStagingDirectory)/package-$(target)/
      displayName: Create Directories

    - ${{ each project in parameters.projects }}:
      - pwsh: |
          Move-Item -Path $(Build.ArtifactStagingDirectory)/drop-$(target)/${{ project }}* -Destination $(Build.ArtifactStagingDirectory)/raw-$(target)/
        displayName: Copy ececutables
        

    - pwsh: |
        $version = (Select-Xml -Path ./Directory.Build.props -XPath 'Project/PropertyGroup/Version').Node.InnerText

        if("$(vmImage)" -eq "windows-latest") {
          Compress-Archive -Path $(Build.ArtifactStagingDirectory)/raw-$(target)/* -DestinationPath $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip
        } else {
          bash -c "cd $(Build.ArtifactStagingDirectory)/raw-$(target)/`nzip -r $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip ./"
        }

        $hash = Get-FileHash $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip -Algorithm SHA256
        $hashbytes = $hash.Hash -split '([A-F0-9]{2})' | foreach-object { if ($_) {[System.Convert]::ToByte($_,16)}}
        $hashstring = [System.Convert]::ToBase64String($hashbytes)
        $hashstring | Set-Content $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip.hash
      displayName: Pagkage executables

    - publish: $(Build.ArtifactStagingDirectory)/package-$(target)
      artifact: package-$(target)