parameters:
  - name: config
    type: string
    default: debug
  - name: projects
    type: object

stages:
  - stage: Build
    jobs:
      - job: Build
        strategy:
          matrix:
            win-x64:
              vmImage: windows-latest
              target: win-x64
              scriptFolder: 'windows'
            win-x86:
              vmImage: windows-latest
              target: win-x86
              scriptFolder: 'windows'
            linux-x64:
              vmImage: ubuntu-latest
              target: linux-x64
              scriptFolder: 'linux'
            linux-arm:
              vmImage: ubuntu-latest
              target: linux-arm
              scriptFolder: 'linux'
            linux-arm64:
              vmImage: ubuntu-latest
              target: linux-arm64
              scriptFolder: 'linux'
            osx-x64:
              vmImage: macos-11
              target: osx-x64
              scriptFolder: 'osx'
        pool:
          vmImage: $(vmImage)
        steps:
          - template: ../restore.yml
          - ${{ each project in parameters.projects }}:
              - pwsh: |
                  mv ./Directory.build.props ./Directory.Build.props
                  dotnet publish ./src/${{ project }}/${{ project }}.csproj -c ${{ parameters.config }} -o $(Build.ArtifactStagingDirectory)/drop-$(target) -r $(target) -f net6.0 --self-contained true /p:EnableCompressionInSingleFile=true /p:DebugType=None /p:DebugSymbols=false /p:GenerateRuntimeConfigurationFiles=false /p:PublishSingleFile=true /p:PublishReadyToRun=true
                displayName: "Publish ${{ project }}"
          - task: codesigning@2
            displayName: 'Code Signing'
            inputs:
              secureFileId: 'codesigning.pfx'
              signCertPassword: '$(Code_Signing_Password)'
              filePaths: |
                $(Build.ArtifactStagingDirectory)/**/*fiskaltrust*
                ./src/**/*fiskaltrust*.exe
                ./src/**/*fiskaltrust*.dll
                ./src/**/fiskaltrust.Launcher.dll
                ./src/**/fiskaltrust.Launcher
                ./src/**/fiskaltrust.Launcher.exe
                ./src/**/fiskaltrust.LauncherUpdater
                ./src/**/fiskaltrust.LauncherUpdater.exe
          - publish: $(Build.ArtifactStagingDirectory)/drop-$(target)
            artifact: drop-$(target)
          - ${{ each project in parameters.projects }}:
              - pwsh: |
                  $version = (Select-Xml -Path ./Directory.Build.props -XPath 'Project/PropertyGroup/Version').Node.InnerText
                  $packagePath = "$(Build.ArtifactStagingDirectory)/package-$(target)"
                  $rawPath = "$(Build.ArtifactStagingDirectory)/raw-$(target)"
                  $zipPath = "$packagePath/fiskaltrust.Launcher-$version.zip"

                  New-Item -ItemType Directory -Path $rawPath, $packagePath -Force
                  Move-Item -Path $(Build.ArtifactStagingDirectory)/drop-$(target)/${{ project }}* -Destination $rawPath/
                  Compress-Archive -Path $rawPath/* -DestinationPath $zipPath -Force

                  $hash = Get-FileHash $zipPath -Algorithm SHA256
                  $hashBytes = [System.Convert]::FromHexString($hash.Hash)
                  $hashBase64 = [System.Convert]::ToBase64String($hashBytes)
                  $hashFilePath = "$packagePath/fiskaltrust.Launcher-$version.zip.hash"
                  Set-Content -Path $hashFilePath -Value $hashBase64
                displayName: "Package ${{ project }}"          
          
          - ${{ each project in parameters.projects }}:
              - pwsh: |
                  $version = (Select-Xml -Path ./Directory.Build.props -XPath 'Project/PropertyGroup/Version').Node.InnerText
                  $scriptZipPath = "$(Build.ArtifactStagingDirectory)/scripts-$(target)/$version.zip"
                  $scriptFolderPath = "./scripts/${{ parameters.scriptFolder }}"

                  New-Item -ItemType Directory -Path "$(Build.ArtifactStagingDirectory)/scripts-$(target)" -Force
                  Compress-Archive -Path "$scriptFolderPath/*" -DestinationPath $scriptZipPath -Force
                displayName: "Package Scripts for ${{ parameters.scriptFolder }}"

          - publish: $(Build.ArtifactStagingDirectory)/package-$(target)
            artifact: package-$(target)
          - publish: $(Build.ArtifactStagingDirectory)/scripts-$(target)
            artifact: scripts-$(target)