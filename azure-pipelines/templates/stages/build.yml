parameters:
  - name: config
    type: string
    default: debug
  - name: projects
    type: object

stages:
  - stage: Build
    jobs:
      - job: Build
        strategy:
          matrix:
            win-x64:
              vmImage: windows-latest
              target: win-x64
              scriptFolder: 'windows'
            win-x86:
              vmImage: windows-latest
              target: win-x86
              scriptFolder: 'windows'
            linux-x64:
              vmImage: ubuntu-latest
              target: linux-x64
              scriptFolder: 'linux'
            linux-arm:
              vmImage: ubuntu-latest
              target: linux-arm
              scriptFolder: 'linux'
            linux-arm64:
              vmImage: ubuntu-latest
              target: linux-arm64
              scriptFolder: 'linux'
            osx-x64:
              vmImage: macos-11
              target: osx-x64
              scriptFolder: 'osx'
        pool:
          vmImage: $(vmImage)
        steps:
          - template: ../restore.yml
          - ${{ each project in parameters.projects }}:
              - pwsh: |
                  mv ./Directory.build.props ./Directory.Build.props
                  dotnet publish ./src/${{ project }}/${{ project }}.csproj -c ${{ parameters.config }} -o $(Build.ArtifactStagingDirectory)/drop-$(target) -r $(target) -f net6.0 --self-contained true /p:EnableCompressionInSingleFile=true /p:DebugType=None /p:DebugSymbols=false /p:GenerateRuntimeConfigurationFiles=false -p:PublishSingleFile=true -p:PublishReadyToRun=true
                displayName: "Publish ${{ project }}"

          - task: codesigning@2
            displayName: 'Code Signing'
            inputs:
              secureFileId: 'codesigning.pfx'
              signCertPassword: '$(Code_Signing_Password)'
              filePaths: |
                $(Build.ArtifactStagingDirectory)/**/*fiskaltrust*
                ./src/**/*fiskaltrust*.exe
                ./src/**/*fiskaltrust*.dll
                ./src/**/fiskaltrust.Launcher.dll
                ./src/**/fiskaltrust.Launcher
                ./src/**/fiskaltrust.Launcher.exe
                ./src/**/fiskaltrust.LauncherUpdater
                ./src/**/fiskaltrust.LauncherUpdater.exe
                displayName: 'Code Signing'

          - publish: $(Build.ArtifactStagingDirectory)/drop-$(target)
            artifact: drop-$(target)

          - ${{ each project in parameters.projects }}:
              - pwsh: |
                  New-Item -ItemType Directory -Path $(Build.ArtifactStagingDirectory)/raw-$(target)/ -Force
                  New-Item -ItemType Directory -Path $(Build.ArtifactStagingDirectory)/package-$(target)/ -Force
                  Move-Item -Path $(Build.ArtifactStagingDirectory)/drop-$(target)/${{ project }}* -Destination $(Build.ArtifactStagingDirectory)/raw-$(target)/
                  $version = (Select-Xml -Path ./Directory.Build.props -XPath 'Project/PropertyGroup/Version').Node.InnerText
                  if("$(vmImage)" -eq "windows-latest") {
                      Compress-Archive -Path $(Build.ArtifactStagingDirectory)/raw-$(target)/* -DestinationPath $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip
                  } else {
                      tar -czf $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.tar.gz -C $(Build.ArtifactStagingDirectory)/raw-$(target) .
                  }
                  # Hash calculation
                  if("$(vmImage)" -eq "windows-latest") {
                      $hash = Get-FileHash $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip -Algorithm SHA256
                  } else {
                      $hash = bash -c "sha256sum $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.tar.gz"
                  }
                  $hashbytes = $hash.Hash -split '([A-F0-9]{2})' | ForEach-Object { if ($_) { [System.Convert]::ToByte($_, 16) } }
                  $hashstring = [System.Convert]::ToBase64String($hashbytes)
                  Set-Content -Path $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip.hash -Value $hashstring
                displayName: "Package ${{ project }}"

          - publish: $(Build.ArtifactStagingDirectory)/package-$(target)
            artifact: package-$(target)

      - job: PublishScripts
        dependsOn: Build
        condition: succeeded()
        strategy:
          matrix:
            linux:
              vmImage: ubuntu-latest
              scriptFolder: linux
            windows:
              vmImage: windows-latest
              scriptFolder: windows
        pool:
          vmImage: $(vmImage)
        steps:
          - checkout: self
          - script: |
              version=$(xmllint --xpath 'string(//Project/PropertyGroup/Version)' ./Directory.Build.props)
              scriptFolder=$(scriptFolder)
              mkdir -p $(Build.ArtifactStagingDirectory)/scripts-$(scriptFolder)
              cp ./scripts/$(scriptFolder)/* $(Build.ArtifactStagingDirectory)/scripts-$(scriptFolder)/
            displayName: 'Prepare Script Artifacts'
            env:
              scriptFolder: $(scriptFolder)

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/scripts-$(scriptFolder)"
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: "$(Build.ArtifactStagingDirectory)/scripts-$(scriptFolder)-$version.zip"
              replaceExistingArchive: true
            displayName: 'Archive Scripts'

          - publish: $(Build.ArtifactStagingDirectory)/scripts-$(scriptFolder)-$version.zip
            artifact: scripts-$(scriptFolder)
            displayName: 'Publish Scripts'