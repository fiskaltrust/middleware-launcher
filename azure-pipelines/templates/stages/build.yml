parameters:
  - name: config
    type: string
    default: debug
  - name: projects
    type: object

stages:
  - stage: Build
    
    jobs:
      - job: Build
        strategy:
          matrix:
            win-x64:
              vmImage: windows-latest
              target: win-x64
            win-x86:
              vmImage: windows-latest
              target: win-x86
            linux-x64:
              vmImage: ubuntu-latest
              target: linux-x64
            linux-arm:
              vmImage: ubuntu-latest
              target: linux-arm
            linux-arm64:
              vmImage: ubuntu-latest
              target: linux-arm64
            osx-x64:
              vmImage: macos-11
              target: osx-x64
        
        pool:
          vmImage: $(vmImage)
        
        steps:
          - template: ../restore.yml

          - ${{ each project in parameters.projects }}:
              - pwsh: |
                  mv ./Directory.build.props ./Directory.Build.props
                  dotnet publish ./src/${{ project }}/${{ project }}.csproj -c ${{ parameters.config }} -o $(Build.ArtifactStagingDirectory)/drop-$(target) -r $(target) -f net6.0 --self-contained true /p:EnableCompressionInSingleFile=true /p:DebugType=None /p:DebugSymbols=false /p:GenerateRuntimeConfigurationFiles=false -p:PublishSingleFile=true -p:PublishReadyToRun=true
                displayName: 'Publish ${{ project }} for ${{ target }}'

          - publish: $(Build.ArtifactStagingDirectory)/drop-$(target)
            artifact: drop-$(target)

          - pwsh: |
              New-Item -ItemType Directory -Path $(Build.ArtifactStagingDirectory)/raw-$(target)/
              New-Item -ItemType Directory -Path $(Build.ArtifactStagingDirectory)/package-$(target)/
            displayName: Create Directories

          - ${{ each project in parameters.projects }}:
              - pwsh: |
                  Move-Item -Path $(Build.ArtifactStagingDirectory)/drop-$(target)/${{ project }}* -Destination $(Build.ArtifactStagingDirectory)/raw-$(target)/
                displayName: 'Move executables to raw for ${{ target }}'

          - pwsh: |
              $version = (Select-Xml -Path ./Directory.Build.props -XPath 'Project/PropertyGroup/Version').Node.InnerText
              if("$(vmImage)" -eq "windows-latest") {
                Compress-Archive -Path $(Build.ArtifactStagingDirectory)/raw-$(target)/* -DestinationPath $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip
              } else {
                bash -c "cd $(Build.ArtifactStagingDirectory)/raw-$(target)/ && zip -r $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip ./"
              }
              $hash = Get-FileHash $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip -Algorithm SHA256
              $hashbytes = $hash.Hash -split '([A-F0-9]{2})' | Where-Object { $_ } | ForEach-Object { [Convert]::ToByte($_, 16) }
              $hashstring = [Convert]::ToBase64String($hashbytes)
              Set-Content -Path $(Build.ArtifactStagingDirectory)/package-$(target)/fiskaltrust.Launcher-$version.zip.hash -Value $hashstring
            displayName: 'Package executables for ${{ target }}'

          - publish: $(Build.ArtifactStagingDirectory)/package-$(target)
            artifact: package-$(target)

      - job: PublishScripts
        dependsOn: Build
        condition: succeeded()
        pool:
          vmImage: ubuntu-latest 
        steps:
          - checkout: self
          - pwsh: |
              echo Copying Linux and macOS scripts to artifacts directory...
              cp ./scripts/linux/install.sh $(Build.ArtifactStagingDirectory)/scripts-linux/
              cp ./scripts/linux/uninstall.sh $(Build.ArtifactStagingDirectory)/scripts-linux/
              cp ./scripts/linux/test.sh $(Build.ArtifactStagingDirectory)/scripts-linux/
            displayName: 'Copy Linux and macOS scripts to artifact staging'
          - publish: $(Build.ArtifactStagingDirectory)/scripts-linux
            artifact: scripts-linux
          - publish: $(Build.ArtifactStagingDirectory)/scripts-linux
            artifact: scripts-macos
        
      - job: PublishWindowsScripts
        dependsOn: Build
        condition: succeeded()
        pool:
          vmImage: windows-latest
        steps:
          - checkout: self
          - pwsh: |
              echo Copying Windows scripts to artifacts directory...
              cp ./scripts/windows/install.cmd $(Build.ArtifactStagingDirectory)/scripts-windows/
              cp ./scripts/windows/uninstall.cmd $(Build.ArtifactStagingDirectory)/scripts-windows/
              cp ./scripts/windows/test.cmd $(Build.ArtifactStagingDirectory)/scripts-windows/
            displayName: 'Copy Windows scripts to artifact staging'
      - publish: $(Build.ArtifactStagingDirectory)/scripts-windows
        artifact: scripts-windows
