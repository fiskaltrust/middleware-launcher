name: 'package'
inputs:
  path:
    required: true
    type: string
  project:
    required: true
    type: string
  target:
    required: true
    type: string  

runs:
  using: "composite"
  steps:
    - name: Install MinVer
      run: dotnet tool install --global minver-cli --version 6.0.0
      shell: pwsh

    - name: Create Directories
      shell: pwsh
      run: |
         New-Item -ItemType Directory -Force -Path ./publish/raw-${{ inputs.target }}
         New-Item -ItemType Directory -Force -Path ./publish/package-${{ inputs.target }}
      
    # - name: Publish ${{ matrix.project }}
    #   shell: pwsh
    #   run: |
    #       mv ./Directory.build.props ./Directory.Build.props
    #       dotnet publish ./src/${{ matrix.project }}/${{ matrix.project }}.csproj -c ${{ needs.test.outputs.config }} -o $(Build.ArtifactStagingDirectory)/drop-${{ inputs.target }} -r ${{ inputs.target }} -f net8.0 --self-contained true -p:DebugType=None -p:DebugSymbols=false -p:GenerateRuntimeConfigurationFiles=false -p:PublishSingleFile=true

    - name: Publish zip packages
      shell: pwsh
      run: |
        $projects = "${{ inputs.project }}".Split(',')
        foreach ($project in $projects) {
           
            $version = "v1.0.0"
            # New-Item -ItemType Directory -Force -Path ./publish/drop-${{ inputs.target }}
            $csprojFile = "${{ inputs.path }}/$project/$project.csproj"

            [xml]$csprojContent = Get-Content -Path $csprojFile
            foreach ($propertyGroup in $csprojContent.Project.PropertyGroup) {
              if ($propertyGroup.MinVerTagPrefix) {
                $version = minver --verbosity error -t $($propertyGroup.MinVerTagPrefix) -p ci
                break
              }
            }

            Write-Host "Version: $version"
            if($version -eq "") {
              Write-Error "Version not found"
              exit 1
            }
               
           dotnet publish $csprojFile --configuration Debug -f net8.0 --output ./publish/drop-${{ inputs.target }} --no-build /p:DebugType=None /p:DebugSymbols=false
           Move-Item -Path ./publish/drop-${{ inputs.target }}/$project* -Destination ./publish/raw-${{ inputs.target }}/
        }
       

        $target = "${{ inputs.target }}"
        if($target.StartsWith("win")) {
          Compress-Archive -Path ./publish/raw-${{ inputs.target }}/* -DestinationPath ./publish/package-${{ inputs.target }}/fiskaltrust.Launcher-$version.zip
        } else {
          bash -c "cd ./publish/raw-${{ inputs.target }} && zip -r ./publish/package-${{ inputs.target }}/fiskaltrust.Launcher-$version.zip ./"
        }

        $hash = Get-FileHash ./publish/package-${{ inputs.target }}/fiskaltrust.Launcher-$version.zip -Algorithm SHA256
        $hashbytes = $hash.Hash -split '([A-F0-9]{2})' | foreach-object { if ($_) {[System.Convert]::ToByte($_,16)}}
        $hashstring = [System.Convert]::ToBase64String($hashbytes)
        $hashstring | Set-Content ./publish/package-${{ inputs.target }}/$version.zip.hash
        ls ./publish/package-${{ inputs.target }}

    - name: Upload v2 Package
      uses: actions/upload-artifact@v4
      with:
        name: package-v2-${{ inputs.target }}
        path: ./publish/package-${{ inputs.target }}